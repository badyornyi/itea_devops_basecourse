{
    "Description": "AWS CloudFormation Template for study project: EC2 instance with SG and IAM role for access to S3 bucket and located in created VPC, with Application Load Balancer",

    "Resources": {
        "Ec2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "EC2S3InstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [ "RegionMap", { "Ref": "AWS::Region" }, "AMI" ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroupIds": [
                    { "Fn::GetAtt": [ "SecurityGroup", "GroupId" ] }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                }
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SSH Access security group for HW7",
                "GroupName": "ssh-access-hw7",
                "SecurityGroupEgress": [{
                    "IpProtocol": "-1",
                    "FromPort": -1,
                    "ToPort": -1,
                    "CidrIp": "0.0.0.0/0"
                }],
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": 22,
                    "ToPort": 22,
                    "CidrIp": "0.0.0.0/0"
                }],
                "VpcId": {
                    "Ref": "Ec2InstanceVpc"
                }
            }
        },
        "S3Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "Description": "AWS role for EC2 instances to access to S3 buckets with read-only permissions (HW7)",
                "Path": "/",
                "Policies": [{
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Sid": "VisualEditor0",
                                "Effect": "Allow",
                                "Action": [
                                    "s3:ListBucketByTags",
                                    "s3:GetLifecycleConfiguration",
                                    "s3:GetBucketTagging",
                                    "s3:GetInventoryConfiguration",
                                    "s3:GetObjectVersionTagging",
                                    "s3:ListBucketVersions",
                                    "s3:GetBucketLogging",
                                    "s3:GetAccelerateConfiguration",
                                    "s3:GetBucketPolicy",
                                    "s3:GetObjectVersionTorrent",
                                    "s3:GetObjectAcl",
                                    "s3:GetEncryptionConfiguration",
                                    "s3:GetBucketRequestPayment",
                                    "s3:GetObjectVersionAcl",
                                    "s3:GetObjectTagging",
                                    "s3:GetMetricsConfiguration",
                                    "s3:GetBucketPublicAccessBlock",
                                    "s3:GetBucketPolicyStatus",
                                    "s3:ListBucketMultipartUploads",
                                    "s3:GetBucketWebsite",
                                    "s3:ListJobs",
                                    "s3:GetBucketVersioning",
                                    "s3:GetBucketAcl",
                                    "s3:GetBucketNotification",
                                    "s3:GetReplicationConfiguration",
                                    "s3:ListMultipartUploadParts",
                                    "s3:GetObject",
                                    "s3:GetObjectTorrent",
                                    "s3:GetAccountPublicAccessBlock",
                                    "s3:DescribeJob",
                                    "s3:GetBucketCORS",
                                    "s3:GetAnalyticsConfiguration",
                                    "s3:GetObjectVersionForReplication",
                                    "s3:GetBucketLocation",
                                    "s3:GetObjectVersion"
                                ],
                                "Resource": "*"
                            }
                        ]
                    },
                    "PolicyName": "s3-read-only-policy-hw7"
                }],
                "RoleName": "s3-read-only-policy-hw7-role"
            }
        },
        "EC2S3InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": "s3-read-only-policy-hw7-role",
                "Path": "/",
                "Roles": [ {
                    "Ref": "S3Role"
                } ]
            }
        },

        "Ec2InstanceVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    { "Key": "Name", "Value": "itea-vps-hw7-cf" }
                ]
            }
        },

        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "VpcId": { "Ref": "Ec2InstanceVpc" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-subnet-public-a-hw7-cf" }
                ]
            }
        },
        "PrivateSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Fn::Select": [ 1, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "false",
                "VpcId": { "Ref": "Ec2InstanceVpc" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-subnet-private-b-hw7-cf" }
                ]
            }
        },
        "PrivateSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Fn::Select": [ 2, { "Fn::GetAZs": "" } ] },
                "CidrBlock": "10.0.2.0/24",
                "MapPublicIpOnLaunch": "false",
                "VpcId": { "Ref": "Ec2InstanceVpc" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-subnet-private-c-hw7-cf" }
                ]
            }
        },

        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": "itea-igv-public-hw7-cf" }
                ]
            }
        },
        "AttachInternetGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": { "Ref": "InternetGateway" },
                "VpcId": { "Ref": "Ec2InstanceVpc" }
            }
        },

        "ElasticIpAllocation": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": { "Fn::GetAtt" : ["ElasticIpAllocation", "AllocationId"] },
                "SubnetId": { "Ref": "PublicSubnetA" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-nat-private-hw7-cf" }
                ]
            },
            "DependsOn" : "ElasticIpAllocation"
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "Ec2InstanceVpc" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-rt-public-hw7-cf" }
                ]
            }
        },
        "PublicSubnetARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "SubnetId": { "Ref": "PublicSubnetA" }
            }
        },
        "RouteForPublicSubnetRouteTable": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "Ec2InstanceVpc" },
                "Tags": [
                    { "Key": "Name", "Value": "itea-rt-private-hw7-cf" }
                ]
            }
        },
        "PrivateSubnetBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "SubnetId": { "Ref": "PrivateSubnetB" }
            }
        },
        "PrivateSubnetCRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "SubnetId": { "Ref": "PrivateSubnetC" }
            }
        },
        "RouteForPrivateSubnetRouteTable": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": { "Ref": "NatGateway" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },


        "ALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "itea-alb-ext-hw8-cf",
                "IpAddressType": "ipv4",
                "Scheme": "internet-facing",
                "SecurityGroups": [{
                    "Fn::GetAtt": [ "SecurityGroupALB", "GroupId" ]
                }],
                "Subnets": [
                    { "Ref": "PublicSubnetA" },
                    { "Ref": "PrivateSubnetB" },
                    { "Ref": "PrivateSubnetC" }
                ],
                "Type": "application"
            }
        },
        "TargetGroupALB":{
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": "itea-tg-hw8-cf",
                "Port": 80,
                "Protocol": "HTTP",
                "Targets": [{ "Id": { "Ref": "Ec2Instance" }, "Port" : 80 }],
                "TargetType": "instance",
                "VpcId": { "Ref": "Ec2InstanceVpc" },

                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/",
                "HealthCheckPort": "traffic-port",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 5,
                "UnhealthyThresholdCount": 2
            }
        },
        "ListenerALB": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": { "Ref": "ALB" },
                "Port": 80,
                "Protocol": "HTTP",
                "DefaultActions": [{
                    "FixedResponseConfig": {
                        "ContentType" : "text/plain",
                        "MessageBody" : "Hi there! Application Load Balancer is alive",
                        "StatusCode" : 200
                    },
                    "Type": "fixed-response"
                }]
            }
        },
        "ListenerRuleNginx": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
                "Actions": [{
                    "TargetGroupArn": { "Ref": "TargetGroupALB" },
                    "Type": "forward"
                }],
                "Conditions": [{
                    "Field": "path-pattern",
                    "Values": [ "/nginx" ]
                }],
                "ListenerArn": { "Ref": "ListenerALB" },
                "Priority": 1
            }
        },
        "SecurityGroupALB": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "itea-alb-ext-sg-hw8-cf description",
                "GroupName": "itea-alb-ext-sg-hw8-cf",
                "SecurityGroupEgress": [{
                    "IpProtocol": "-1",
                    "FromPort": -1,
                    "ToPort": -1,
                    "CidrIp": "0.0.0.0/0"
                }],
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": 80,
                    "ToPort": 80,
                    "CidrIp": "0.0.0.0/0"
                }],
                "VpcId": { "Ref": "Ec2InstanceVpc" }
            }
        },
        "VpcSecurityGroupIngressUpdate": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "HTTP for access from ALB",
                "GroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "SourceSecurityGroupId": { "Ref": "SecurityGroupALB" }
            },
            "DependsOn" : "SecurityGroupALB"
        }
    },

    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type (t2.micro only, for free tier usage)",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String"
        }
    },

    "Mappings": {
        "RegionMap": {
            "eu-central-1": {
                "AMI": "ami-010fae13a16763bb4"
            },
            "eu-west-1": {
                "AMI": "ami-028188d9b49b32a80"
            },
            "us-east-1": {
                "AMI": "ami-00eb20669e0990cb4"
            }
        }
    }
}